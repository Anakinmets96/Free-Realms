/********************************************************************** 

Filename	:	FreeRealmsTheme_Edit.thm
Content		:	FreeRealms - GEdit control theme


Licensees may use this file in accordance with the valid Scaleform
GFC Commercial License Agreement provided with the software.

This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING 
THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR ANY PURPOSE.

For information regarding GFC Commercial License Agreements go to:
	online - http://www.scaleform.com/licensing.html or
	email  - sales@scaleform.com 

**********************************************************************/


// *** Main Edit control namespace 

with GFC_Control_Edit
{
	
	GFC_Control_DefaultEdit_Style
	{
		GFC_Control_Renderer_Control		=	GFC_CtrlTheme_Bitmap_Control_Edit_Renderer_Control;

		with .Renderer
		{
			.Text			=	GFC_CtrlTheme_Bitmap_Control_Edit_Renderer_Text;
			.Select			=	GFC_CtrlTheme_Bitmap_Control_Edit_Renderer_Select;
			.Caret			=	GFC_CtrlTheme_Bitmap_Control_Edit_Renderer_Caret;
			.DragCaret		=	GFC_CtrlTheme_Bitmap_Control_Edit_Renderer_DragCaret;
		}						
									
		with .Child					
		{						
			.Border					=	GFC_CtrlTheme_Bitmap_Control_Edit_Child_Border;
			.ScrollFrame			=	GFC_CtrlTheme_Bitmap_Control_Edit_Child_ScrollFrame;
			.PopupMenu				=	GFC_CtrlTheme_Bitmap_Control_Edit_Child_PopupMenu;
			.DropMenu				=	GFC_CtrlTheme_Bitmap_Control_Edit_Child_DropMenu;
									
			// History object		
			.History				=	GFC_CtrlTheme_Bitmap_Control_Edit_Child_DefaultHistory;
		}						
									
		with .StyleId				
		{						
			.Border					=	GPropertyId(GFC_Control_StandardBorder_Style);
			.ScrollFrame			=	GPropertyId(GFC_Control_StandardScrollFrame_Style);
			.PopupMenu				=	GPropertyId(GFC_Control_StandardMenu_Style);
			.DropMenu				=	GPropertyId(GFC_Control_StandardMenu_Style);
		}

		with GFC_Control_Flag
		{	
			// Base control flags
			.Transparent						=	GFlags(GCtrl, GFC_CF_TRANSPARENT);
			.SolidInner							=	0;	//GFlags(GCtrl, GFC_CF_SOLIDINNER);
			.SolidBackground					=	0;	//GFlags(GCtrl, GFC_CF_SOLIDBACKGROUND);
			.RegionClip							=	0;	//GFlags(GCtrl, GFC_CF_REGIONCLIP);
			.RegionClipParent					=	0;	//GFlags(GCtrl, GFC_CF_REGIONCLIP_PARENT);
			.NoExternalWindow					=	0;	//GFlags(GCtrl, GFC_CF_NOEXTERNALWINDOW);
			.HitTest							=	0;	//GFlags(GCtrl, GFC_CF_HITTEST);
			.TopLayer							=	0;	//GFlags(GCtrl, GFC_CF_TOPLAYER);
			.TopLayerBitmap						=	0;	//GFlags(GCtrl, GFC_CF_TOPLAYERBITMAP);
			.BottomLayerBitmap					=	1;	//GFlags(GCtrl, GFC_CF_BOTTOMLAYERBITMAP);
											
			// Control flag change masks	
			.Mask_InvalidateControl				=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		}

		with .Flag
		{																										
			// Edit flags																				
			.NoInnerFill						=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_NOINNERFILL);
			.NoBorder							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_NOBORDER);
			.History							=	GFlags(GEditCtrl, GFC_CF_EDIT_HISTORY);
			.Select								=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_FOCUS );
			.TabSize							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_TAB_SIZE);
			.TabKey								=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_TAB_KEY);
			.VAlign								=	GFlags(GEditCtrl, GFC_CF_EDIT_VCENTER);
			.HAlign								=	GFlags(GEditCtrl, GFC_CF_EDIT_LEFT);
			.Wrap								=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
			.CropLeft							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_CROP_LEFT);
			.CropRight							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_CROP_RIGHT);
			.CropTop							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_CROP_TOP);
			.CropBottom							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_CROP_BOTTOM);
			.Multiline							=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
			.Clamp								=	0;	//GFlags(GEditCtrl, GFC_CF_EDIT_CLAMP_TOTOP);
			.ScrollFrame						=	GFlags(GEditCtrl, GFC_CF_EDIT_SCROLLFRAME);
			
			// Edit flag change																			
			// - No assignment uses defaults
			//.EditMask_InvalidateControl		=	GFlags(GEditCtrl);
			//.EditMask_UpdateDrawText			=	GFlags(GEditCtrl);
		}
		
		with .Size
		{
			.ViewMargin							=	GRectMargin(2,2,2,2);
			.PageMargin							=	GRectMargin(0,0,0,0);
			.PageWidth							=	0;
			.TextOffset							=	GPoint(0,0);	
													
			.MaxCharCount						=	0;
			.MaxLineCount						=	0;
													
			.TabSize							=	8;
			//.TabStops							=	0;
													
			.ScrollShiftUp						=	0;
			.ScrollShiftDown					=	0;
			.ScrollShiftLeft					=	10;
			.ScrollShiftRight					=	10;
		
			// Zero for either size component causes
			// the caret to be the size of the character
			.Caret_Insert						=	GSize(3,0);
			.Caret_Overwrite					=	GSize(0,0);
			.Caret_DragCopy						=	GSize(3,0);
			.Caret_DragMove						=	GSize(3,0);
			.Caret_DragLink						=	GSize(3,0);
			.CaretOffset_Insert					=	GPoint(-1,0);
			.CaretOffset_Overwrite				=	GPoint(0,0);
			.CaretOffset_DragCopy				=	GPoint(-1,0);
			.CaretOffset_DragMove				=	GPoint(-1,0);
			.CaretOffset_DragLink				=	GPoint(-1,0);
			.CaretExtent_Insert					=	GRectMargin(0,1,0,2);
			.CaretExtent_Overwrite				=	GRectMargin(0,1,0,2);
			.CaretExtent_DragCopy				=	GRectMargin(0,1,0,2);
			.CaretExtent_DragMove				=	GRectMargin(0,1,0,2);
			.CaretExtent_DragLink				=	GRectMargin(0,1,0,2);
												
			.Default							=	GSize(40,24);
		}
		
		with .Color
		{
			.Text_Default						=	GFC_Control_Color_Text_Default;
			.Text_Select						=	GFC_Control_Color_Text_Select;
			.Text_Inactive						=	.Text_Default;
			.Text_InactiveSelect				=	.Text_Default;
			.Text_Disable						=	GFC_Control_Color_Text_Disable;
			.Text_DisableSelect					=	GFC_Control_Color_Text_Disable;					
			
			.Inner_Default						=	GFC_Control_Color_Inner_Default;
			.Inner_Inactive						=	GFC_Control_Color_Inner_Default;
			.Inner_Disable						=	GFC_Control_Color_Inner_Disable;

			.Select_Default						=	GFC_Control_Color_Inner_Select;
			.Select_Inactive					=	GFC_Control_Color_Inner_InactiveSelect;
			.Select_Disable						=	GFC_Control_Color_Inner_DisableSelect;
			
			.Caret_Insert_Default				=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Insert_Select				=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Insert_Inactive				=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Insert_InactiveSelect		=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Insert_Disable				=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Insert_DisableSelect			=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Overwrite_Default			=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Overwrite_Select				=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Overwrite_Inactive			=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Overwrite_InactiveSelect		=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Overwrite_Disable			=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_Overwrite_DisableSelect		=	GFC_Control_Color_3DLook_VeryLight;
			.Caret_DragCopy						=	GFC_Control_Color_3DLook_Dark;
			.Caret_DragMove						=	GFC_Control_Color_3DLook_Dark;
			.Caret_DragLink						=	GFC_Control_Color_3DLook_Dark;
		}

		with .Combine
		{
			.Text_Default_Dest					=	GFC_Control_Combine_Text_Default_Dest;
			.Text_Default_Factor				=	GFC_Control_Combine_Text_Default_Factor;
			.Text_Select_Dest					=	GFC_Control_Combine_Text_Select_Dest;
			.Text_Select_Factor					=	GFC_Control_Combine_Text_Select_Factor;
			.Text_Inactive_Dest					=	.Text_Default_Dest;
			.Text_Inactive_Factor				=	.Text_Default_Factor;
			.Text_InactiveSelect_Dest			=	GFC_Control_Combine_Text_InactiveSelect_Dest;
			.Text_InactiveSelect_Factor			=	GFC_Control_Combine_Text_InactiveSelect_Factor;
			.Text_Disable_Dest					=	GFC_Control_Combine_Text_Disable_Dest;
			.Text_Disable_Factor				=	GFC_Control_Combine_Text_Disable_Factor;
			.Text_DisableSelect_Dest			=	GFC_Control_Combine_Text_DisableSelect_Dest;								
			.Text_DisableSelect_Factor			=	GFC_Control_Combine_Text_DisableSelect_Factor;
			
			.Inner_Default						=	GFC_Control_Combine_Inner_Default;
			.Inner_Inactive						=	GFC_Control_Combine_Inner_Default;
			.Inner_Disable						=	GFC_Control_Combine_Inner_Disable;
			
			.Select_Default						=	GFC_Control_Combine_Inner_Select;
			.Select_Inactive					=	GFC_Control_Combine_Inner_InactiveSelect;
			.Select_Disable						=	GFC_Control_Combine_Inner_DisableSelect;
			
			.Caret_Insert_Default				=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Insert_Select				=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Insert_Inactive				=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Insert_InactiveSelect		=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Insert_Disable				=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Insert_DisableSelect			=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Overwrite_Default			=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Overwrite_Select				=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Overwrite_Inactive			=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Overwrite_InactiveSelect		=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Overwrite_Disable			=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_Overwrite_DisableSelect		=	GColorCombine(Source, Disable);  //GColorCombine(XOr, Source);
			.Caret_DragCopy						=	GColorCombine(Source, Disable);  //GColorCombine(BlendSource, Disable);
			.Caret_DragMove						=	GColorCombine(Source, Disable);  //GColorCombine(BlendSource, Disable);
			.Caret_DragLink						=	GColorCombine(Source, Disable);  //GColorCombine(BlendSource, Disable);
		}

		with .Cursor
		{
			.Text								=	GFC_Control_Cursor_Text;
			.Selection							=	GFC_Control_Cursor_Arrow;
			.SelectingText						=	GFC_Control_Cursor_Text;
			.SelectingTextLeft					=	GFC_Control_Cursor_Text;
			.SelectingTextRight					=	GFC_Control_Cursor_Text;
			.DragMove							=	GFC_Control_Cursor_DragMove;
			.DragCopy							=	GFC_Control_Cursor_DragCopy;
			.DragLink							=	GFC_Control_Cursor_DragLink;
		}								
										
		.Font_Text								=	GFC_Control_Font_Normal;
											
		.Delay_BlinkRate						=	500;
											

		// ******* Initialize all the Bitmap theme Edit properties to avoid inheritance problems

		with GFC_CtrlTheme_Bitmap_Control_Edit
		{
			// Forces the selection to be done with a solid color fill
			// - avoids using skins and is generally much faster
			.Flag_Select_SolidFill = 1;	

			// *** Skins																					
			with .Skin																												
			{
				// Caret skins																					
				// Normal insert and overwrite style carets
				.Caret_Insert_Default					=	0;
				.Caret_Insert_Inactive					=	0;
				.Caret_Insert_Disable					=	0;
				.Caret_Overwrite_Default				=	0;
				.Caret_Overwrite_Inactive				=	0;
				.Caret_Overwrite_Disable				=	0;	
				// Drag
				.Caret_DragCopy							=	0;
				.Caret_DragMove							=	0;
				.Caret_DragLink							=	0;
				// Inner skin																				
				.Inner_Default							=	0;
				.Inner_Inactive							=	0;
				.Inner_Disable							=	0;

				// *** Selected skins

				// ** Single line selection
				// - special case skin only used if Edit control is in single line mode
				// - if not available then the control falls back onto the multiline skins
				.Select_SingleLine_Default				=	0;
				.Select_SingleLine_Disable				=	0;
				.Select_SingleLine_Inactive				=	0;

				// ** Multiline selection (coming soon!)
				// Select Edge: Left in |->  Right in <-| and so on Top down / Bottom up
				// Select CornerIn: Corners with the selection inside the border area
				// Select CornerOut: Corners with the selection outside the border area
			}
		}

		map GFC_Control			=	GFC_Control_DefaultControl_Style;
	}	// end GFC_Control_DefaultEdit_Style


	// Edit border
	style SF_CtrlTheme_FreeRealms_Control_Edit_Standard_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(10,6,10,5); //GRectMargin(16,8,16,8);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_MASK, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit_Border.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(17,7,17,7);
				}
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_MASK, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit_Border_Highlight.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(17,7,17,7);
				}
			}
			.Full_Disable
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		= GColorCombine(RevSubtract,Disable);
					FactorCombine	= GColorCombine(Modulate,Source);
					FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadowDis;
					Image			= GBitmap("FreeRealms/FR_Edit.tga", HVGrid, 2, 1, 0, 0);
					Margin			= GRectMargin(10,12,10,12);
				}
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		= GColorCombine(Add,Disable);
					FactorCombine	= GColorCombine(Modulate, Source);
					FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
					Image			= GBitmap("FreeRealms/FR_Edit.tga", HVGrid, 2, 1, 0, 0);
					Margin			= GRectMargin(10,12,10,12);
				}				
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		= GColorCombine(Add,Disable);
					FactorCombine	= GColorCombine(Modulate, Source);
					FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineFocus;
					Image			= GBitmap("FreeRealms/FR_Edit.tga", HVGrid, 2, 1, 0, 1);
					Margin			= GRectMargin(10,12,10,12);
				}
			}					
			.Full_Inactive
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_MASK, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit_Border.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(17,7,17,7);
				}
			}
			.Full_InactiveDisable
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit.tga", HVGrid, 2, 1, 0, 0);
					Margin			= GRectMargin(10,12,10,12);
				}
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit.tga", HVGrid, 2, 1, 0, 1);
					Margin			= GRectMargin(10,12,10,12);
				}
			}
			.Full_Winoff			=	.Full_Inactive;
			.Full_WinoffDisable		=	.Full_InactiveDisable;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}
	

	// ChatBubble Border
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_White.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}

	// ChatBubble Border Black
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Black_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Black.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}
	// ChatBubble Border Blue
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Blue_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Blue.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}	

	// ChatBubble Border Green
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Green_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Green.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}

	// ChatBubble Border Pink
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Pink_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Pink.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}

	// ChatBubble Border Purple
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Purple_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Purple.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}
	
	// ChatBubble Border Red
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Red_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Red.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}

	// ChatBubble Border Yellow
	style SF_CtrlTheme_FreeRealms_Control_ChatBubble_Yellow_Border_Style
	{
		GFC_Control_Flag_Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_ACTIVE, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		GFC_Control_Border_Size_Margin					=	GRectMargin(24,24,24,24); //GRectMargin(0,0,0,0);
	
		with GFC_CtrlTheme_Bitmap_Control_Border_Skin
		{
			.Full_Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					Image			= GBitmap("FreeRealms/FR_ChatBubble_Yellow.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(24,24,24,24);
				}
			}
			.Full_Disable = 0;					
			.Full_Inactive = 0;
			.Full_InactiveDisable = 0;
			.Full_Winoff			=	0;
			.Full_WinoffDisable		=	0;
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Left);
			.BottomRightCorner				=	GPropertyId(.Flag_Right);
		}

		map GFC_CtrlTheme_Bitmap_Control_Border		=	GFC_Control_DefaultBorder_Style;
		map GFC_Control								=	GFC_Control_DefaultBorder_Style;
	}

	// ** Normal edit box style

	GFC_Control_StandardEdit_Style
	{	
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_Edit_Standard_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit_Inner.tga");
					DestCombine		= GColorCombine(BlendSource,Disable);
					Margin			= GRectMargin(20,0,20,0);
					Indent			= GRectMargin(7,0,7,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= GBitmap("FreeRealms/FR_Edit_Inner.tga");
					Margin			= GRectMargin(0,0,0,0);
				}
			}
		}
		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Caret
		{
			.Insert_Default
			{
				layer {
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= GBitmap("FreeRealms/FR_EditCaret.tga", HVGrid, 3, 1, 0, 0);
					Margin			= GRectMargin(5,4,0,4);
				}
			}
			.Insert_Inactive				=	.Insert_Default;
			.Insert_Disable					=	.Insert_Default;
			
			.Overwrite_Default
			{
				layer {
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= GBitmap("FreeRealms/FR_EditCaret.tga", HVGrid, 3, 1, 2, 0);
					Margin			= GRectMargin(5,4,0,4);
				}
			}
			.Overwrite_Inactive				=	.Overwrite_Default;
			.Overwrite_Disable				=	.Overwrite_Default;	

			.DragCopy
			{
				layer {
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_TILE);
					Image			= GBitmap("FreeRealms/FR_EditCaret.tga", HVGrid, 3, 1, 1, 0);
					Margin			= GRectMargin(0,4,0,4);
				}
			}
			.DragMove						=	.DragCopy;
			.DragLink						=	.DragCopy;
		}

		map SF_CtrlTheme_FreeRealms_Control					=	GFC_Control_DefaultEdit_Style;
		map GFC_CtrlTheme_Bitmap_Control_Edit					=	GFC_Control_DefaultEdit_Style;
		map GFC_Control											=	GFC_Control_DefaultEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(8,0,2,2);
	}

	GFC_Control_FlatEdit_Style
	{
		.StyleId_Border								=	GPropertyId(GFC_Control_FlatBorder_Style);

		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control								=	GFC_Control_StandardEdit_Style;
	}

	GFC_Control_SolidEdit_Style
	{
		.Flag_NoBorder								=	GFlags(GEditCtrl, GFC_CF_EDIT_NOBORDER);
		
		.StyleId_Border								=	GPropertyId(GFC_Control_EmptyBorder_Style);

		.Size_ViewMargin							=	GRectMargin(0,0,0,0);

		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control								=	GFC_Control_StandardEdit_Style;
	}

	GFC_Control_ClearEdit_Style
	{
		
		.Flag_NoBorder			=	GFlags(GEditCtrl, GFC_CF_EDIT_NOBORDER);
		.Flag_NoInnerFill		=	GFlags(GEditCtrl, GFC_CF_EDIT_NOINNERFILL);

		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default			=	0;
			.Inactive			=	0;
		}

		.Size_ViewMargin		=	GRectMargin(0,0,0,0);

		map SF_CtrlTheme_FreeRealms_Control					=	GFC_Control_StandardEdit_Style;
		map GFC_CtrlTheme_Bitmap_Control_Edit					=	GFC_Control_StandardEdit_Style;
		map GFC_Control											=	GFC_Control_StandardEdit_Style;
	}

	GFC_Control_MultilineEdit_Style
	{
		.Flag_Multiline								=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select								=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_NORMAL);
		.Flag_CropLeft								=	0;
		.Flag_Wrap									=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign								=	GFlags(GEditCtrl, GFC_CF_EDIT_TOP);
		.Flag_TabKey								=	GFlags(GEditCtrl, GFC_CF_EDIT_TAB_KEY);
		.Flag_NoBorder			=	GFlags(GEditCtrl, GFC_CF_EDIT_NOBORDER);
		.Flag_NoInnerFill		=	GFlags(GEditCtrl, GFC_CF_EDIT_NOINNERFILL);


		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default =0;

			.Inactive				=	.Default; 
		}

		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control								=	GFC_Control_StandardEdit_Style;
	}

	GFC_Control_BubbleEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap					=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_White.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}

		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Color_Text_Default  = GColor(17, 81, 117);
		
		.Font_Text								=	GFC_Control_Font_Normal;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);
	}

	GFC_Control_Bubble_BlackEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap						=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Black_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Black.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(255, 255, 255);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);

	}

	GFC_Control_Bubble_BlueEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap					=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Blue_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Blue.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(155, 255, 255);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);
	}

	GFC_Control_Bubble_GreenEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap					=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Green_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Green.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(34, 45, 19);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);

	}

	GFC_Control_Bubble_PinkEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap					=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Pink_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Pink.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(248, 239, 245);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);

	}

	GFC_Control_Bubble_PurpleEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap						=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Purple_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Purple.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);
				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(255, 255, 255);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);

	}
	
	GFC_Control_Bubble_RedEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap					=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Red_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Red.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(255, 240, 240);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);

	}

	GFC_Control_Bubble_YellowEdit_Style
	{
		.Flag_Multiline					=	GFlags(GEditCtrl, GFC_CF_EDIT_MULTILINE);
		.Flag_Select					=	GFlags(GEditCtrl, GFC_CF_EDIT_SELECT_HIDDEN);
		.Flag_CropLeft					=	0;
		.Flag_Wrap					=	GFlags(GEditCtrl, GFC_CF_EDIT_WRAP_WORD);
		.Flag_VAlign					=	0;
		.Flag_TabKey					=	0;
		.Flag_ScrollFrame				=   0;
		
		
		.StyleId_Border		= GPropertyId(SF_CtrlTheme_FreeRealms_Control_ChatBubble_Yellow_Border_Style);		
		with GFC_CtrlTheme_Bitmap_Control_Edit_Skin_Inner
		{
			.Default
			{
				layer
				{
					LayerFlags		= 	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
					Image			= 	GBitmap("FreeRealms/FR_ChatBubble_Yellow.tga", GRect(24, 24, 177,40));
					DestCombine		= 	GColorCombine(BlendSource,Disable);
					Margin			= 	GRectMargin(0,0,0,0);
					Indent			= 	GRectMargin(0,0,0,0);

				}
			}
			.Inactive				=	.Default; 
			.Disable 				=	.Default;
		}
		.Color_Text_Default  = GColor(152, 0, 0);
		map GFC_CtrlTheme_Bitmap_Control_Edit		=	GFC_Control_StandardEdit_Style;
		map GFC_Control					=	GFC_Control_StandardEdit_Style;
		
		.Size_ViewMargin  =	GRectMargin(0,0,2,2);

	}

}