/********************************************************************** 

Filename	:	FreeRealmsTheme_Table.thm
Content		:	FreeRealms - GTable control theme

Licensees may use this file in accordance with the valid Scaleform
GFC Commercial License Agreement provided with the software.

This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING 
THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR ANY PURPOSE.

For information regarding GFC Commercial License Agreements go to:
	online - http://www.scaleform.com/licensing.html or
	email  - sales@scaleform.com 

**********************************************************************/


with GFC_Control_Table
{

	GFC_Control_DefaultTable_Style
	{
		GFC_Control_Renderer_Control			=	GFC_CtrlTheme_Bitmap_Control_Table_Renderer_Control;
								
		with .Renderer				
		{						
			.Cell								=	GFC_CtrlTheme_Bitmap_Control_Table_Renderer_Cell;
			.DragPanel							=	GFC_CtrlTheme_Bitmap_Control_Table_Renderer_DragPanel;
			.InsertIndicator					=	GFC_CtrlTheme_Bitmap_Control_Table_Renderer_InsertIndicator;
			.Text								=	GFC_CtrlTheme_Bitmap_Control_Table_Renderer_Text;
			.Image								=	GFC_CtrlTheme_Bitmap_Control_Table_Renderer_Image;
		}									
												
		with .Child								
		{							
			.OuterBorder				=	GFC_CtrlTheme_Bitmap_Control_Table_Child_OuterBorder;
			.InnerBorder				=	GFC_CtrlTheme_Bitmap_Control_Table_Child_InnerBorder;
			.HHeader					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_HHeader;
			.VHeader					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_VHeader;
			.HScroll					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_HScroll;
			.VScroll					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_VScroll;
			.LTCorner					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_LTCorner;
			.RTCorner					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_RTCorner;
			.LBCorner					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_LBCorner;
			.RBCorner					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_RBCorner;
			.DragPanel					=	GFC_CtrlTheme_Bitmap_Control_Table_Child_DragPanel;
			.InsertIndicator			=	GFC_CtrlTheme_Bitmap_Control_Table_Child_InsertIndicator;	
		}
		
		with .StyleId						
		{							
			.OuterBorder				=	GPropertyId(GFC_Control_InBorder_Style);
			.InnerBorder				=	GPropertyId(GFC_Control_EmptyBorder_Style);
			.HHeader					=	GPropertyId(GFC_Control_StandardHeaderTable_Style);
			.VHeader					=	GPropertyId(GFC_Control_StandardHeaderTable_Style);
			.HScroll					=	GPropertyId(GFC_Control_StandardScroll_Style);
			.VScroll					=	GPropertyId(GFC_Control_StandardScroll_Style);
			.LTCorner					=	GPropertyId(GFC_Control_StandardPanel_Style);
			.RTCorner					=	GPropertyId(GFC_Control_StandardPanel_Style);
			.LBCorner					=	GPropertyId(GFC_Control_StandardPanel_Style);
			.RBCorner					=	GPropertyId(GFC_Control_StandardPanel_Style);
			//.DragPanel					=	0; //GPropertyId(GFC_CtrlTheme_Bitmap_Control_Table_Child_DragPanel);
			//.InsertIndicator			=	0; //GPropertyId(GFC_CtrlTheme_Bitmap_Control_Table_Child_InsertIndicator);	
		}
		
		with GFC_Control_Flag
		{
			// Base control flags							
			.Transparent						=	GFlags(GCtrl, GFC_CF_TRANSPARENT);
			.SolidInner							=	0;	//GFlags(GCtrl, GFC_CF_SOLIDINNER);
			.SolidBackground					=	0;	//GFlags(GCtrl, GFC_CF_SOLIDBACKGROUND);
			.RegionClip							=	0;	//GFlags(GCtrl, GFC_CF_REGIONCLIP);
			.RegionClipParent					=	0;	//GFlags(GCtrl, GFC_CF_REGIONCLIP_PARENT);
			.NoExternalWindow					=	0;	//GFlags(GCtrl, GFC_CF_NOEXTERNALWINDOW);
			.HitTest							=	0;	//GFlags(GCtrl, GFC_CF_HITTEST);
			.TopLayer							=	0;	//GFlags(GCtrl, GFC_CF_TOPLAYER);
			.TopLayerBitmap						=	0;	//GFlags(GCtrl, GFC_CF_TOPLAYERBITMAP);
			.BottomLayerBitmap					=	0;	//GFlags(GCtrl, GFC_CF_BOTTOMLAYERBITMAP);
												
			// Control flag change masks		
			.Mask_InvalidateControl				=	GFlags(GCtrl, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		}

		with .Flag								
		{
			// Table flags						
			.NoBorder							=	0;	//GFlags(GTableCtrl, GFC_CF_TABLE_NOBORDER);
			.NoInnerFill						=	0;	//GFlags(GTableCtrl, GFC_CF_TABLE_NOINNERFILL);
			.NoInnerBorder						=	0;	//GFlags(GTableCtrl, GFC_CF_TABLE_NOINNERBORDER);
			.HGrid								=	0;	//GFlags(GTableCtrl, GFC_CF_TABLE_DRAW_HGRID);
			.VGrid								=	0;	//GFlags(GTableCtrl, GFC_CF_TABLE_DRAW_VGRID);

			// Control flag change masks		
			//.TableMask_InvalidateControl		=	GFlags(GTableCtrl);
		}
		
		with .Size
		{
			.Header								=	GSize(24,24);
			.Scroll								=	GSize(18,18);
			.CellContentMargin					=	GRectMargin(4,2,4,2);
			.CellTextMargin						=	GRectMargin(4,0,4,0);
			.CellItemSpace						=	GFC_Control_Size_ItemSpace;
			.CellHeight							=	GFC_Control_Size_ListItem;
																			
			// Auto scroll							
			.AutoScrollDelta					=	18;

			.HInsertIndicator					=	12;
			.VInsertIndicator					=	12;

			.HScrollBlockLineCount				=	3;
			.VScrollBlockLineCount				=	3;
		}
		
		with .Delay
		{
			// Autoscroll delays per delta
			.ScrollDelay1						=	250;
			.ScrollDelay2						=	120;
			.ScrollDelay3						=	40;
			.ScrollDelay4						=	20;
		}
		
		with .Cursor
		{
			.HResize							=	GFC_Control_Cursor_HSplit;
			.VResize							=	GFC_Control_Cursor_VSplit;
		}
		
		with .Color
		{
			.Grid_Default						=	GFC_Control_Color_Text_Disable;
			.Grid_Disable						=	GFC_Control_Color_Text_Disable;	
			.Grid_Inactive						=	GFC_Control_Color_Text_Disable;
													
			.Inner_Default						=	GFC_Control_Color_Inner_Default;
			.Inner_Select						=	SF_CtrlTheme_FreeRealms_Control_Color_Tableselect;
			.Inner_Offselect					=	SF_CtrlTheme_FreeRealms_Control_Color_Offselect;
			.Inner_Multiselect					=	SF_CtrlTheme_FreeRealms_Control_Color_Multiselect;
			.Inner_Disable						=	GFC_Control_Color_Inner_Disable;
			.Inner_DisableSelect				=	GFC_Control_Color_Inner_DisableSelect;
			.Inner_DisableOffselect				=	SF_CtrlTheme_FreeRealms_Control_Color_InactiveOffselect;
			.Inner_DisableMultiselect			=	SF_CtrlTheme_FreeRealms_Control_Color_InactiveMultiselect;
			.Inner_Inactive						=	GFC_Control_Color_Inner_InactiveSelect;
			.Inner_InactiveSelect				=	SF_CtrlTheme_FreeRealms_Control_Color_Tableselect;
			.Inner_InactiveOffselect			=	SF_CtrlTheme_FreeRealms_Control_Color_InactiveOffselect;
			.Inner_InactiveMultiselect			=	SF_CtrlTheme_FreeRealms_Control_Color_InactiveMultiselect;		
													
			.Border_Default						=	GFC_Control_Color_Border_Default;
			.Border_Select						=	.Border_Default;
			.Border_Offselect					=	.Border_Default;
			.Border_Multiselect					=	.Border_Default;
			.Border_Disable						=	.Border_Default;
			.Border_DisableSelect				=	.Border_Default;
			.Border_DisableOffselect			=	.Border_Default;
			.Border_DisableMultiselect			=	.Border_Default;
			.Border_Inactive					=	.Border_Default;	
			.Border_InactiveSelect				=	.Border_Default;	
			.Border_InactiveOffselect			=	.Border_Default;
			.Border_InactiveMultiselect			=	.Border_Default;	
													
			.Text_Default						=	GFC_Control_Color_Text_Default;
			.Text_Select						=	GFC_Control_Color_Text_Select;
			.Text_Offselect						=	GFC_Control_Color_Text_Default;
			.Text_Multiselect					=	GFC_Control_Color_Text_Default;
			.Text_Disable						=	GFC_Control_Color_Text_Disable;
			.Text_DisableSelect					=	GFC_Control_Color_Text_DisableSelect;
			.Text_DisableOffselect				=	GFC_Control_Color_Text_DisableSelect;	
			.Text_DisableMultiselect			=	GFC_Control_Color_Text_DisableSelect;
			.Text_Inactive						=	GFC_Control_Color_Text_InactiveSelect;
			.Text_InactiveSelect				=	GFC_Control_Color_Text_InactiveSelect;
			.Text_InactiveOffselect				=	GFC_Control_Color_Text_InactiveSelect;
			.Text_InactiveMultiselect			=	GFC_Control_Color_Text_InactiveSelect;

			.TextShadow_Default					=	SF_CtrlTheme_FreeRealms_Control_Color_TextGlow;
			.TextShadow_Select					=	.TextShadow_Default;
			.TextShadow_Offselect				=	.TextShadow_Default;
			.TextShadow_Multiselect				=	.TextShadow_Default;
			.TextShadow_Disable					=	.TextShadow_Default;
			.TextShadow_DisableSelect			=	.TextShadow_Disable;			
			.TextShadow_DisableOffselect		=	.TextShadow_Disable;				
			.TextShadow_DisableMultiselect		=	.TextShadow_Disable;			
			.TextShadow_Inactive				=	.TextShadow_Default;
			.TextShadow_InactiveSelect			=	.TextShadow_Inactive;										
			.TextShadow_InactiveOffselect		=	.TextShadow_Inactive;					
			.TextShadow_InactiveMultiselect		=	.TextShadow_Inactive;
																
			.Image_Default						=	GFC_Control_Color_Image_Default;
			.Image_Select						=	GFC_Control_Color_Image_Select;
			.Image_Offselect					=	.Image_Select;
			.Image_Multiselect					=	.Image_Select;
			.Image_Disable						=	GFC_Control_Color_Image_Disable;
			.Image_DisableSelect				=	GFC_Control_Color_Image_DisableSelect;
			.Image_DisableOffselect				=	.Image_DisableSelect;
			.Image_DisableMultiselect			=	.Image_DisableSelect;
			.Image_Inactive						=	GFC_Control_Color_Image_Inactive;
			.Image_InactiveSelect				=	GFC_Control_Color_Image_InactiveSelect;
			.Image_InactiveOffselect			=	.Image_InactiveSelect;
			.Image_InactiveMultiselect			=	.Image_InactiveSelect;
													
			.InsertIndicator					=	GFC_Control_Color_Text_Default;
			.DragPanel_BottomLayer				=	GFC_Control_Color_Text_Select;		//Don't know what this is?
		}

		with .Combine
		{
			.Grid_Default						=	GFC_Control_Combine_Text_Disable_Dest;
			.Grid_Disable						=	GFC_Control_Combine_Text_Disable_Dest;	
			.Grid_Inactive						=	GFC_Control_Combine_Text_Disable_Dest;
													
			.Inner_Default						=	GFC_Control_Combine_Inner_Default;
			.Inner_Select						=	GFC_Control_Combine_Inner_Select;
			.Inner_Offselect					=	GFC_Control_Combine_Inner_Select;
			.Inner_Multiselect					=	GFC_Control_Combine_Inner_Select;
			.Inner_Disable						=	GFC_Control_Combine_Inner_Disable;
			.Inner_DisableSelect				=	GFC_Control_Combine_Inner_DisableSelect;
			.Inner_DisableOffselect				=	GFC_Control_Combine_Inner_DisableSelect;
			.Inner_DisableMultiselect			=	GFC_Control_Combine_Inner_DisableSelect;
			.Inner_Inactive						=	GFC_Control_Combine_Inner_Default;
			.Inner_InactiveSelect				=	GFC_Control_Combine_Inner_InactiveSelect;
			.Inner_InactiveOffselect			=	GFC_Control_Combine_Inner_InactiveSelect;
			.Inner_InactiveMultiselect			=	GFC_Control_Combine_Inner_InactiveSelect;
													
			.Border_Default						=	GFC_Control_Combine_Border_Default;
			.Border_Select						=	.Border_Default;
			.Border_Offselect					=	.Border_Default;
			.Border_Multiselect					=	.Border_Default;
			.Border_Disable						=	.Border_Default;
			.Border_DisableSelect				=	.Border_Default;
			.Border_DisableOffselect			=	.Border_Default;
			.Border_DisableMultiselect			=	.Border_Default;
			.Border_Inactive					=	.Border_Default;
			.Border_InactiveSelect				=	.Border_Default;
			.Border_InactiveOffselect			=	.Border_Default;
			.Border_InactiveMultiselect			=	.Border_Default;
													
			.Text_Default_Dest					=	GFC_Control_Combine_Text_Default_Dest;
			.Text_Default_Factor				=	GFC_Control_Combine_Text_Default_Factor;
			.Text_Select_Dest					=	GFC_Control_Combine_Text_Select_Dest;
			.Text_Select_Factor					=	GFC_Control_Combine_Text_Select_Factor;
			.Text_Offselect_Dest				=	GFC_Control_Combine_Text_Select_Dest;
			.Text_Offselect_Factor				=	GFC_Control_Combine_Text_Select_Factor;
			.Text_Multiselect_Dest				=	GFC_Control_Combine_Text_Select_Dest;
			.Text_Multiselect_Factor			=	GFC_Control_Combine_Text_Select_Factor;
			.Text_Disable_Dest					=	GFC_Control_Combine_Text_Disable_Dest;
			.Text_Disable_Factor				=	GFC_Control_Combine_Text_Disable_Factor;
			.Text_DisableSelect_Dest			=	GFC_Control_Combine_Text_DisableSelect_Dest;
			.Text_DisableSelect_Factor			=	GFC_Control_Combine_Text_DisableSelect_Factor;
			.Text_DisableOffselect_Dest			=	GFC_Control_Combine_Text_DisableSelect_Dest;
			.Text_DisableOffselect_Factor		=	GFC_Control_Combine_Text_DisableSelect_Factor;
			.Text_DisableMultiselect_Dest		=	GFC_Control_Combine_Text_DisableSelect_Dest;
			.Text_DisableMultiselect_Factor		=	GFC_Control_Combine_Text_DisableSelect_Factor;
			.Text_Inactive_Dest					=	GFC_Control_Combine_Text_Default_Dest;
			.Text_Inactive_Factor				=	GFC_Control_Combine_Text_Default_Factor;
			.Text_InactiveSelect_Dest			=	GFC_Control_Combine_Text_InactiveSelect_Dest;
			.Text_InactiveSelect_Factor			=	GFC_Control_Combine_Text_InactiveSelect_Factor;
			.Text_InactiveOffselect_Dest		=	GFC_Control_Combine_Text_InactiveSelect_Dest;
			.Text_InactiveOffselect_Factor		=	GFC_Control_Combine_Text_InactiveSelect_Factor;
			.Text_InactiveMultiselect_Dest		=	GFC_Control_Combine_Text_InactiveSelect_Dest;
			.Text_InactiveMultiselect_Factor	=	GFC_Control_Combine_Text_InactiveSelect_Factor;

			.TextShadow_Default_Dest				=	GFC_Control_Combine_TextShadow_Default_Dest;
			.TextShadow_Default_Factor				=	GFC_Control_Combine_TextShadow_Default_Factor;
			.TextShadow_Select_Dest					=	GFC_Control_Combine_TextShadow_Select_Dest;
			.TextShadow_Select_Factor				=	GFC_Control_Combine_TextShadow_Select_Factor;
			.TextShadow_Offselect_Dest				=	GFC_Control_Combine_TextShadow_Select_Dest;
			.TextShadow_Offselect_Factor			=	GFC_Control_Combine_TextShadow_Select_Factor;
			.TextShadow_Multiselect_Dest			=	GFC_Control_Combine_TextShadow_Select_Dest;
			.TextShadow_Multiselect_Factor			=	GFC_Control_Combine_TextShadow_Select_Factor;
			.TextShadow_Disable_Dest				=	GFC_Control_Combine_TextShadow_Disable_Dest;
			.TextShadow_Disable_Factor				=	GFC_Control_Combine_TextShadow_Disable_Factor;
			.TextShadow_DisableSelect_Dest			=	GFC_Control_Combine_TextShadow_DisableSelect_Dest;
			.TextShadow_DisableSelect_Factor		=	GFC_Control_Combine_TextShadow_DisableSelect_Factor;
			.TextShadow_DisableOffselect_Dest		=	GFC_Control_Combine_TextShadow_DisableSelect_Dest;
			.TextShadow_DisableOffselect_Factor		=	GFC_Control_Combine_TextShadow_DisableSelect_Factor;
			.TextShadow_DisableMultiselect_Dest		=	GFC_Control_Combine_TextShadow_DisableSelect_Dest;
			.TextShadow_DisableMultiselect_Factor	=	GFC_Control_Combine_TextShadow_DisableSelect_Factor;
			.TextShadow_Inactive_Dest				=	GFC_Control_Combine_TextShadow_Default_Dest;
			.TextShadow_Inactive_Factor				=	GFC_Control_Combine_TextShadow_Default_Factor;
			.TextShadow_InactiveSelect_Dest			=	GFC_Control_Combine_TextShadow_InactiveSelect_Dest;
			.TextShadow_InactiveSelect_Factor		=	GFC_Control_Combine_TextShadow_InactiveSelect_Factor;
			.TextShadow_InactiveOffselect_Dest		=	GFC_Control_Combine_TextShadow_InactiveSelect_Dest;
			.TextShadow_InactiveOffselect_Factor	=	GFC_Control_Combine_TextShadow_InactiveSelect_Factor;
			.TextShadow_InactiveMultiselect_Dest	=	GFC_Control_Combine_TextShadow_InactiveSelect_Dest;
			.TextShadow_InactiveMultiselect_Factor	=	GFC_Control_Combine_TextShadow_InactiveSelect_Factor;
													
			.Image_Default_Dest					=	GFC_Control_Combine_Image_Default_Dest;
			.Image_Default_Factor				=	GFC_Control_Combine_Image_Default_Factor;
			.Image_Select_Dest					=	GFC_Control_Combine_Image_Select_Dest;
			.Image_Select_Factor				=	GFC_Control_Combine_Image_Select_Factor;
			.Image_Offselect_Dest				=	GFC_Control_Combine_Image_Select_Dest;
			.Image_Offselect_Factor				=	GFC_Control_Combine_Image_Select_Factor;	
			.Image_Multiselect_Dest				=	GFC_Control_Combine_Image_Select_Dest;
			.Image_Multiselect_Factor			=	GFC_Control_Combine_Image_Select_Factor;
			.Image_Disable_Dest					=	GFC_Control_Combine_Image_Disable_Dest;
			.Image_Disable_Factor				=	GFC_Control_Combine_Image_Disable_Factor;		
			.Image_DisableSelect_Dest			=	GFC_Control_Combine_Image_DisableSelect_Dest;
			.Image_DisableSelect_Factor			=	GFC_Control_Combine_Image_DisableSelect_Factor;
			.Image_DisableOffselect_Dest		=	GFC_Control_Combine_Image_DisableSelect_Dest;
			.Image_DisableOffselect_Factor		=	GFC_Control_Combine_Image_DisableSelect_Factor;
			.Image_DisableMultiselect_Dest		=	GFC_Control_Combine_Image_DisableSelect_Dest;
			.Image_DisableMultiselect_Factor	=	GFC_Control_Combine_Image_DisableSelect_Factor;
			.Image_Inactive_Dest				=	GFC_Control_Combine_Image_InactiveSelect_Dest;
			.Image_Inactive_Factor				=	GFC_Control_Combine_Image_InactiveSelect_Factor;
			.Image_InactiveSelect_Dest			=	GFC_Control_Combine_Image_InactiveSelect_Dest;
			.Image_InactiveSelect_Factor		=	GFC_Control_Combine_Image_InactiveSelect_Factor;
			.Image_InactiveOffselect_Dest		=	GFC_Control_Combine_Image_InactiveSelect_Dest;
			.Image_InactiveOffselect_Factor		=	GFC_Control_Combine_Image_InactiveSelect_Factor;
			.Image_InactiveMultiselect_Dest		=	GFC_Control_Combine_Image_InactiveSelect_Dest;
			.Image_InactiveMultiselect_Factor	=	GFC_Control_Combine_Image_InactiveSelect_Factor;
													
			.InsertIndicator					=	GFC_Control_Combine_Inner_Default;
			.DragPanel_BottomLayer_Dest			=	GColorCombine(Add, Disable);
			.DragPanel_BottomLayer_Factor		=	GColorCombine(Modulate, Source);
		}										
													
		// Fonts									
		with .Font									
		{										
			.Text_Default						=	GFC_Control_Font_Normal;
			.Text_Select						=	GFC_Control_Font_Normal;
		}


		// ******* Initialize all the Bitmap theme Table properties to avoid inheritance problems

		with GFC_CtrlTheme_Bitmap_Control_Table_Skin
		{
			.HInsertIndicator_Default						=	0;
			.VInsertIndicator_Default						=	0;

			with .Inner
			{
				.Default									=	0;
				.Disable									=	0;
				.Inactive									=	0;
				.InactiveDisable							=	0;
			}

			with .Cell
			{
				.Default									=	0;
				.Rollover									=	0;
				.Disable									=	0;
				.DisableRollover							=	0;
				.Inactive									=	0;
				.InactiveRollover							=	0;
				.InactiveDisable							=	0;
				.InactiveDisableRollover					=	0;
				.Select										=	0;
				.SelectRollover								=	0;
				.DisableSelect								=	0;
				.DisableSelectRollover						=	0;
				.InactiveSelect								=	0;
				.InactiveSelectRollover						=	0;
				.InactiveDisableSelect						=	0;
				.InactiveDisableSelectRollover				=	0;
				.Multiselect								=	0;
				.MultiselectRollover						=	0;
				.DisableMultiselect							=	0;
				.DisableMultiselectRollover					=	0;
				.InactiveMultiselect						=	0;
				.InactiveMultiselectRollover				=	0;
				.InactiveDisableMultiselect					=	0;
				.InactiveDisableMultiselectRollover			=	0;
				.Offselect									=	0;
				.OffselectRollover							=	0;
				.DisableOffselect							=	0;
				.DisableOffselectRollover					=	0;
				.InactiveOffselect							=	0;
				.InactiveOffselectRollover					=	0;
				.InactiveDisableOffselect					=	0;
				.InactiveDisableOffselectRollover			=	0;
			}

			with .Row
			{
				.Default									=	0;
				.Rollover									=	0;
				.Disable									=	0;
				.DisableRollover							=	0;
				.Inactive									=	0;
				.InactiveRollover							=	0;
				.InactiveDisable							=	0;
				.InactiveDisableRollover					=	0;
				.Select										=	0;
				.SelectRollover								=	0;
				.DisableSelect								=	0;
				.DisableSelectRollover						=	0;
				.InactiveSelect								=	0;
				.InactiveSelectRollover						=	0;
				.InactiveDisableSelect						=	0;
				.InactiveDisableSelectRollover				=	0;
				.Multiselect								=	0;
				.MultiselectRollover						=	0;
				.DisableMultiselect							=	0;
				.DisableMultiselectRollover					=	0;
				.InactiveMultiselect						=	0;
				.InactiveMultiselectRollover				=	0;
				.InactiveDisableMultiselect					=	0;
				.InactiveDisableMultiselectRollover			=	0;
				.Offselect									=	0;
				.OffselectRollover							=	0;
				.DisableOffselect							=	0;
				.DisableOffselectRollover					=	0;
				.InactiveOffselect							=	0;
				.InactiveOffselectRollover					=	0;
				.InactiveDisableOffselect					=	0;
				.InactiveDisableOffselectRollover			=	0;
			}
			with .Row_Alt
			{
				.Default									=	0;
				.Rollover									=	0;
				.Disable									=	0;
				.DisableRollover							=	0;
				.Inactive									=	0;
				.InactiveRollover							=	0;
				.InactiveDisable							=	0;
				.InactiveDisableRollover					=	0;
				.Select										=	0;
				.SelectRollover								=	0;
				.DisableSelect								=	0;
				.DisableSelectRollover						=	0;
				.InactiveSelect								=	0;
				.InactiveSelectRollover						=	0;
				.InactiveDisableSelect						=	0;
				.InactiveDisableSelectRollover				=	0;
				.Multiselect								=	0;
				.MultiselectRollover						=	0;
				.DisableMultiselect							=	0;
				.DisableMultiselectRollover					=	0;
				.InactiveMultiselect						=	0;
				.InactiveMultiselectRollover				=	0;
				.InactiveDisableMultiselect					=	0;
				.InactiveDisableMultiselectRollover			=	0;
				.Offselect									=	0;
				.OffselectRollover							=	0;
				.DisableOffselect							=	0;
				.DisableOffselectRollover					=	0;
				.InactiveOffselect							=	0;
				.InactiveOffselectRollover					=	0;
				.InactiveDisableOffselect					=	0;
				.InactiveDisableOffselectRollover			=	0;
			}
				
			with .Col
			{
				.Default									=	0;
				.Rollover									=	0;
				.Disable									=	0;
				.DisableRollover							=	0;
				.Inactive									=	0;
				.InactiveRollover							=	0;
				.InactiveDisable							=	0;
				.InactiveDisableRollover					=	0;
				.Select										=	0;
				.SelectRollover								=	0;
				.DisableSelect								=	0;
				.DisableSelectRollover						=	0;
				.InactiveSelect								=	0;
				.InactiveSelectRollover						=	0;
				.InactiveDisableSelect						=	0;
				.InactiveDisableSelectRollover				=	0;
				.Multiselect								=	0;
				.MultiselectRollover						=	0;
				.DisableMultiselect							=	0;
				.DisableMultiselectRollover					=	0;
				.InactiveMultiselect						=	0;
				.InactiveMultiselectRollover				=	0;
				.InactiveDisableMultiselect					=	0;
				.InactiveDisableMultiselectRollover			=	0;
				.Offselect									=	0;
				.OffselectRollover							=	0;
				.DisableOffselect							=	0;
				.DisableOffselectRollover					=	0;
				.InactiveOffselect							=	0;
				.InactiveOffselectRollover					=	0;
				.InactiveDisableOffselect					=	0;
				.InactiveDisableOffselectRollover			=	0;
			}
			with .Col_Alt
			{
				.Default									=	0;
				.Rollover									=	0;
				.Disable									=	0;
				.DisableRollover							=	0;
				.Inactive									=	0;
				.InactiveRollover							=	0;
				.InactiveDisable							=	0;
				.InactiveDisableRollover					=	0;
				.Select										=	0;
				.SelectRollover								=	0;
				.DisableSelect								=	0;
				.DisableSelectRollover						=	0;
				.InactiveSelect								=	0;
				.InactiveSelectRollover						=	0;
				.InactiveDisableSelect						=	0;
				.InactiveDisableSelectRollover				=	0;
				.Multiselect								=	0;
				.MultiselectRollover						=	0;
				.DisableMultiselect							=	0;
				.DisableMultiselectRollover					=	0;
				.InactiveMultiselect						=	0;
				.InactiveMultiselectRollover				=	0;
				.InactiveDisableMultiselect					=	0;
				.InactiveDisableMultiselectRollover			=	0;
				.Offselect									=	0;
				.OffselectRollover							=	0;
				.DisableOffselect							=	0;
				.DisableOffselectRollover					=	0;
				.InactiveOffselect							=	0;
				.InactiveOffselectRollover					=	0;
				.InactiveDisableOffselect					=	0;
				.InactiveDisableOffselectRollover			=	0;
			}
		}		

		map GFC_Control			=	GFC_Control_DefaultControl_Style;
	}	// end GFC_Control_DefaultTable_Style



// ***** Table control Bitmap Skin

// Header Button styles

style SF_CtrlTheme_FreeRealms_Control_Header_Table_HButtonStyle
{
	GFC_Control_Renderer_Control			=	GFC_CtrlTheme_Bitmap_Control_Button_Renderer_ControlStandard;		
	
	GFC_Control_Button_Size_BorderMargin	=	GRectMargin(2,4,8,4);
	GFC_Control_Button_Size_ExtraMargin		=	GRectMargin(2,4,8,4);

	// Image skins
	with GFC_CtrlTheme_Bitmap_Control_Button_Skin
	{
		.Default
		{
			//Drop Shadow
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 0);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 0);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 3);
				Margin			= GRectMargin(8,11,8,12);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 3);
				Margin			= GRectMargin(8,11,8,12);
			}
		}											
		.Rollover					
		{
			//Drop Shadow
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 0);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 0);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_BILINEAR, GFC_BITMAPSKIN_SIDES_BILINEAR);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceRoll1;
				Image			= GBitmap("FreeRealms/FR_HeaderH_Roll.tga", HVGrid, 2, 2, 0, 0);
				Margin			= GRectMargin(0,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_BILINEAR, GFC_BITMAPSKIN_SIDES_BILINEAR);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH_Roll.tga", HVGrid, 2, 2, 1, 0);
				Margin			= GRectMargin(0,11,8,12);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_BILINEAR, GFC_BITMAPSKIN_SIDES_BILINEAR);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceRoll2;
				Image			= GBitmap("FreeRealms/FR_HeaderH_Roll.tga", HVGrid, 2, 2, 0, 1);
				Margin			= GRectMargin(0,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_BILINEAR, GFC_BITMAPSKIN_SIDES_BILINEAR);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderH_Roll.tga", HVGrid, 2, 2, 1, 1);
				Margin			= GRectMargin(0,11,8,12);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 3);
				Margin			= GRectMargin(8,11,8,12);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 3);
				Margin			= GRectMargin(8,11,8,12);
			}
		}				
		.Press						
		{
			//Drop Shadow
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 0);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 3);
				Margin			= GRectMargin(8,11,8,12);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 3);
				Margin			= GRectMargin(8,11,8,12);
			}
		}
		.Disable					
		{
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 1);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 2);
				Margin			= GRectMargin(8,11,8,12);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 3);
				Margin			= GRectMargin(8,11,8,12);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 1, 3);
				Margin			= GRectMargin(8,11,8,12);
			}
		}				
		.Focus					=	.Default;
		.FocusRollover			=	.Rollover;
	}

	map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_DefaultButton_Style;	
	map GFC_CtrlTheme_Bitmap_Control_Button					=	GFC_Control_DefaultButton_Style;	
	map GFC_Control											=	GFC_Control_DefaultButton_Style;
}


style SF_CtrlTheme_FreeRealms_Control_Header_Table_VButtonStyle
{
	GFC_Control_Renderer_Control			=	GFC_CtrlTheme_Bitmap_Control_Button_Renderer_ControlStandard;		
	
	GFC_Control_Button_Size_BorderMargin	=	GRectMargin(0,0,0,0);
	GFC_Control_Button_Size_ExtraMargin		=	GRectMargin(6,0,6,8);

	// Image skins
	with GFC_CtrlTheme_Bitmap_Control_Button_Skin
	{
		.Default
		{
			//Drop Shadow
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 0, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 0, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 0);
				Margin			= GRectMargin(10,8,10,8);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
		}											
		.Rollover					
		{
			//Drop Shadow
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 0, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 0, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceRoll1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceRoll2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 0);
				Margin			= GRectMargin(10,8,10,8);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
		}				
		.Press						
		{
			//Drop Shadow
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 0, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 0);
				Margin			= GRectMargin(10,8,10,8);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
		}
		.Disable					
		{
			//Surface 1
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 1, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Surface 2
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 2, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			//Outline
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 0);
				Margin			= GRectMargin(10,8,10,8);
			}					
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_HeaderV.tga", HVGrid, 4, 2, 3, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
		}				
		.Focus					=	.Default;
		.FocusRollover			=	.Rollover;
	}

	map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_DefaultButton_Style;	
	map GFC_CtrlTheme_Bitmap_Control_Button					=	GFC_Control_DefaultButton_Style;	
	map GFC_Control											=	GFC_Control_DefaultButton_Style;
}


	style SF_CtrlTheme_FreeRealms_Control_Header_Table_HSortAscendButton_Style
	{
		with GFC_Control_Button_Image
		{
			.Default				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 0, 0);
			.Rollover				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 0, 0);
			.Press					=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 0, 0);
			.Disable				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 0, 0);
		}

		GFC_Control_Button_Flag_Text_HAlign			=	GFlags(GButtonCtrl, GFC_CF_BUTTON_TEXT_LEFT);

		map GFC_CtrlTheme_Bitmap_Control_Button		=	SF_CtrlTheme_FreeRealms_Control_Header_Table_HButtonStyle;
		map GFC_Control								=	SF_CtrlTheme_FreeRealms_Control_Header_Table_HButtonStyle;
	}

	style SF_CtrlTheme_FreeRealms_Control_Header_Table_HSortDescendButton_Style
	{
		with GFC_Control_Button_Image
		{
			.Default				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 1, 0);
			.Rollover				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 1, 0);
			.Press					=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 1, 0);
			.Disable				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 1, 0);
		}

		GFC_Control_Button_Flag_Text_HAlign			=	GFlags(GButtonCtrl, GFC_CF_BUTTON_TEXT_LEFT);

		map GFC_CtrlTheme_Bitmap_Control_Button		=	SF_CtrlTheme_FreeRealms_Control_Header_Table_HButtonStyle;
		map GFC_Control								=	SF_CtrlTheme_FreeRealms_Control_Header_Table_HButtonStyle;
	}


	style SF_CtrlTheme_FreeRealms_Control_Header_Table_VSortAscendButton_Style
	{
		with GFC_Control_Button_Image
		{
			.Default				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 2, 0);
			.Rollover				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 2, 0);
			.Press					=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 2, 0);
			.Disable				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 2, 0);
		}

		GFC_Control_Button_Flag_Text_HAlign			=	GFlags(GButtonCtrl, GFC_CF_BUTTON_TEXT_LEFT);

		map GFC_CtrlTheme_Bitmap_Control_Button		=	SF_CtrlTheme_FreeRealms_Control_Header_Table_VButtonStyle;
		map GFC_Control								=	SF_CtrlTheme_FreeRealms_Control_Header_Table_VButtonStyle;
	}

	style SF_CtrlTheme_FreeRealms_Control_Header_Table_VSortDescendButton_Style
	{
		with GFC_Control_Button_Image
		{
			.Default				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 3, 0);
			.Rollover				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 3, 0);
			.Press					=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 3, 0);
			.Disable				=	GBitmap("FreeRealms/FR_Header_Sort.tga", HVGrid, 4, 1, 3, 0);
		}

		GFC_Control_Button_Flag_Text_HAlign			=	GFlags(GButtonCtrl, GFC_CF_BUTTON_TEXT_LEFT);

		map GFC_CtrlTheme_Bitmap_Control_Button		=	SF_CtrlTheme_FreeRealms_Control_Header_Table_VButtonStyle;
		map GFC_Control								=	SF_CtrlTheme_FreeRealms_Control_Header_Table_VButtonStyle;
	}
		

// *** Table panel (corner) styles

style SF_CtrlTheme_FreeRealms_Control_Table_Standard_LTCornerPanel_Style
{
	GFC_Control_Flag_Transparent			=	0;
	
	GFC_Control_Panel_Flag_NoInnerFill		=	0;
	GFC_Control_Panel_Flag_NoBorder			=	GFlags(GPanelCtrl, GFC_CF_PANEL_NOBORDER);
	
	GFC_Control_Border_Size_Margin			=	GRectMargin(0,0,0,0);
	
	// Image skins
	with GFC_CtrlTheme_Bitmap_Control_Panel_Skin_Inner
	{
		.Default
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 0);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 1);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 2);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 3);
				Margin			= GRectMargin(8,10,8,12);
			}					
		}
		.Disable
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 1);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 2);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 0, 3);
				Margin			= GRectMargin(8,10,8,12);
			}					
		}
		.Winoff					=	.Default;
		.WinoffDisable			=	.Disable;
	}						
	
	map SF_CtrlTheme_FreeRealms_Control					=	GFC_Control_StandardPanel_Style;
	map GFC_CtrlTheme_Bitmap_Control_Panel					=	GFC_Control_StandardPanel_Style;
	map GFC_Control											=	GFC_Control_StandardPanel_Style;
}

style SF_CtrlTheme_FreeRealms_Control_Table_Standard_RTCornerPanel_Style
{
	GFC_Control_Flag_Transparent			=	0;
	
	GFC_Control_Panel_Flag_NoInnerFill		=	0;
	GFC_Control_Panel_Flag_NoBorder			=	GFlags(GPanelCtrl, GFC_CF_PANEL_NOBORDER);
	
	GFC_Control_Border_Size_Margin			=	GRectMargin(0,0,0,0);
	
	// Image skins
	with GFC_CtrlTheme_Bitmap_Control_Panel_Skin_Inner
	{
		.Default
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 0);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 1);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 2);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 3);
				Margin			= GRectMargin(8,10,8,12);
			}					
		}
		.Disable
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 1);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 2);
				Margin			= GRectMargin(8,10,8,12);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 1, 3);
				Margin			= GRectMargin(8,10,8,12);
			}					
		}
		.Winoff					=	.Default;
		.WinoffDisable			=	.Disable;
	}						
	
	map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_StandardPanel_Style;
	map GFC_CtrlTheme_Bitmap_Control_Panel					=	GFC_Control_StandardPanel_Style;
	map GFC_Control											=	GFC_Control_StandardPanel_Style;
}

style SF_CtrlTheme_FreeRealms_Control_Table_Standard_LBCornerPanel_Style
{
	GFC_Control_Flag_Transparent			=	0;
	
	GFC_Control_Panel_Flag_NoInnerFill		=	0;
	GFC_Control_Panel_Flag_NoBorder			=	GFlags(GPanelCtrl, GFC_CF_PANEL_NOBORDER);
	
	GFC_Control_Border_Size_Margin			=	GRectMargin(0,0,0,0);
	
	// Image skins
	with GFC_CtrlTheme_Bitmap_Control_Panel_Skin_Inner
	{
		.Default
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 0);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 2);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Outline;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 3);
				Margin			= GRectMargin(10,8,10,8);
			}					
		}
		.Disable
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(BlendSource,Disable);
				FactorCombine	= GColorCombine(Modulate, Modulate);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 1);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 2);
				Margin			= GRectMargin(10,8,10,8);
			}
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(Add,Disable);
				FactorCombine	= GColorCombine(Modulate, Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
				Image			= GBitmap("FreeRealms/FR_TableCorners.tga", HVGrid, 4, 4, 2, 3);
				Margin			= GRectMargin(10,8,10,8);
			}					
		}
		.Winoff					=	.Default;
		.WinoffDisable			=	.Disable;
	}						
	
	map SF_CtrlTheme_FreeRealms_Control					=	GFC_Control_StandardPanel_Style;
	map GFC_CtrlTheme_Bitmap_Control_Panel					=	GFC_Control_StandardPanel_Style;
	map GFC_Control											=	GFC_Control_StandardPanel_Style;
}

style SF_CtrlTheme_FreeRealms_Control_Table_Standard_RBCornerPanel_Style
{
	GFC_Control_Flag_Transparent			=	0;
	
	GFC_Control_Panel_Flag_NoInnerFill		=	0;
	GFC_Control_Panel_Flag_NoBorder			=	GFlags(GPanelCtrl, GFC_CF_PANEL_NOBORDER);
	
	GFC_Control_Border_Size_Margin			=	GRectMargin(0,0,0,0);
	
	// Image skins
	with GFC_CtrlTheme_Bitmap_Control_Panel_Skin_Inner
	{
		.Default
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
				Image			= GBitmap("FreeRealms/FR_ScrollTrack.tga", HVGrid, 1, 1, 0, 0);
				Margin			= GRectMargin(0,0,0,0);
			}					
		}
		.Disable
		{
			layer
			{
				LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
				DestCombine		= GColorCombine(RevSubtract,Disable);
				FactorCombine	= GColorCombine(Modulate,Source);
				FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadowDis;
				Image			= GBitmap("FreeRealms/FR_ScrollTrack.tga", HVGrid, 1, 1, 0, 0);
				Margin			= GRectMargin(0,0,0,0);
			}
		}
		.Winoff					=	.Default;
		.WinoffDisable			=	.Disable;
	}						
	
	map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_StandardPanel_Style;
	map GFC_CtrlTheme_Bitmap_Control_Panel					=	GFC_Control_StandardPanel_Style;
	map GFC_Control											=	GFC_Control_StandardPanel_Style;
}

with GFC_Control_Header
{

	GFC_Control_DefaultHeaderTable_Style
	{

		with GFC_Control_Flag
		{
			// Base control flags				
			.Transparent					=	GFlags(GCtrl, GFC_CF_TRANSPARENT);
			.SolidInner						=	0;	//GFlags(GCtrl, GFC_CF_SOLIDINNER);
			.SolidBackground				=	0;	//GFlags(GCtrl, GFC_CF_SOLIDBACKGROUND);
			.RegionClip						=	0;	//GFlags(GCtrl, GFC_CF_REGIONCLIP);
			.RegionClipParent				=	0;	//GFlags(GCtrl, GFC_CF_REGIONCLIP_PARENT);
			.NoExternalWindow				=	0;	//GFlags(GCtrl, GFC_CF_NOEXTERNALWINDOW);
			.HitTest						=	0;	//GFlags(GCtrl, GFC_CF_HITTEST);
			.TopLayer						=	0;	//GFlags(GCtrl, GFC_CF_TOPLAYER);
			.TopLayerBitmap					=	0;	//GFlags(GCtrl, GFC_CF_TOPLAYERBITMAP);
			.BottomLayerBitmap				=	0;	//GFlags(GCtrl, GFC_CF_BOTTOMLAYERBITMAP);
											
			// Control flag change masks	
			.Mask_InvalidateControl			=	GFlags(GCtrl, GFC_CF_DISABLED, GFC_CF_TRANSPARENT, GFC_CF_TOPLAYER);
		}

		with .Flag
		{
			// Header flags
			.NoInnerFill					=	0;	//GFlags(GHeaderCtrl, GFC_CF_HEADER_NOINNERFILL);
											
			// Header flag change masks	
			//.HeaderMask_InvalidateControl	=	GFlags(GHeaderCtrl);
		}

		with .Child
		{
			.HButton						=	GFC_CtrlTheme_Bitmap_Control_Header_Child_HButton;
			.VButton						=	GFC_CtrlTheme_Bitmap_Control_Header_Child_VButton;
		}
			
		
		with .StyleId							
		{									
			.HButton							=	GPropertyId(GFC_Control_StandardButton_Style);
			.HSortAscendButton					=	.HButton;
			.HSortDescendButton					=	.HButton;
			.VButton							=	GPropertyId(GFC_Control_StandardButton_Style);
			.VSortAscendButton					=	.VButton;
			.VSortDescendButton					=	.VButton;
		}
		
		with GFC_Control_Table_Size
		{
			.HInsertIndicator				=	14;
			.VInsertIndicator				=	14;
		}

		map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_DefaultTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Table					=	GFC_Control_DefaultTable_Style;
		map GFC_Control											=	GFC_Control_DefaultTable_Style;
	}
					
					
											
	GFC_Control_StandardHeaderTable_Style
	{
		GFC_Control_Table_Flag_NoBorder			=	GFlags(GTableCtrl, GFC_CF_TABLE_NOBORDER);
		GFC_Control_Table_Flag_NoInnerBorder	=	GFlags(GTableCtrl, GFC_CF_TABLE_NOINNERBORDER);

		// Header flags
		GFC_Control_Table_Flag_NoInnerFill		=	0;	//GFlags(GHeaderCtrl, GFC_CF_HEADER_NOINNERFILL);

		with .StyleId
		{
			.HButton				=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Header_Table_HButtonStyle);
			.HSortAscendButton		=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Header_Table_HSortAscendButton_Style);
			.HSortDescendButton		=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Header_Table_HSortDescendButton_Style);
			.VButton				=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Header_Table_VButtonStyle);
			.VSortAscendButton		=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Header_Table_VSortAscendButton_Style);
			.VSortDescendButton		=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Header_Table_VSortDescendButton_Style);
		}

		
		with GFC_CtrlTheme_Bitmap_Control_Table_Skin_HInsertIndicator
		{		
			.Default
			{
				layer {
					LayerFlags		=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(BlendSource,Disable);
					FactorCombine	=	GColorCombine(Modulate,Source);
					FactorColor		=	GFC_Control_Table_Color_Text_Default;
					Image			=	GBitmap("FreeRealms/FR_Header_HInsertIndicator.tga", HVGrid, 1, 1, 0, 0);
					Margin			=	GRectMargin(0,12,0,12);
				}					
			}									
		} 
		
		
		with GFC_CtrlTheme_Bitmap_Control_Table_Skin_VInsertIndicator
		{
			.Default
			{
				layer {
					LayerFlags		=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(BlendSource,Disable);
					FactorCombine	=	GColorCombine(Modulate,Source);
					FactorColor		=	GFC_Control_Table_Color_Text_Default;
					Image			=	GBitmap("FreeRealms/FR_Header_VInsertIndicator.tga", HVGrid, 1, 1, 0, 0);
					Margin			=	GRectMargin(12,0,12,0);
				}					
			}
		}
		
		map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_DefaultHeaderTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Table					=	GFC_Control_DefaultHeaderTable_Style;
		map GFC_Control											=	GFC_Control_DefaultHeaderTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Header					=	GFC_Control_DefaultHeaderTable_Style;
		map GFC_Control											=	GFC_Control_DefaultHeaderTable_Style;
	}
									
	style SF_CtrlTheme_FreeRealms_Control_HeaderTable_HStandard_Style
	{		
		
		with GFC_CtrlTheme_Bitmap_Control_Table_Skin
		{
			with .Inner
			{
				.Default
				{
					layer
					{
						LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
						DestCombine		= GColorCombine(RevSubtract,Disable);
						FactorCombine	= GColorCombine(Modulate,Source);
						FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
						Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 0);
						Margin			= GRectMargin(0,0,0,0);
					}										
				}						
				.Inactive				=	.Default;
				.Disable				=	.Default;
				.InactiveDisable		=	.Disable;
			}
		}

		map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_StandardHeaderTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Table					=	GFC_Control_StandardHeaderTable_Style;
		map GFC_Control											=	GFC_Control_StandardHeaderTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Header					=	GFC_Control_StandardHeaderTable_Style;
		map GFC_Control											=	GFC_Control_StandardHeaderTable_Style;
	}

	style SF_CtrlTheme_FreeRealms_Control_HeaderTable_VStandard_Style
	{		
		
		with GFC_CtrlTheme_Bitmap_Control_Table_Skin
		{
			with .Inner
			{
				.Default
				{
					layer
					{
						LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
						DestCombine		= GColorCombine(RevSubtract,Disable);
						FactorCombine	= GColorCombine(Modulate,Source);
						FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
						Image			= GBitmap("FreeRealms/FR_HeaderH.tga", HVGrid, 2, 4, 0, 0);
						Margin			= GRectMargin(0,0,0,0);
					}					
				}						
				.Inactive				=	.Default;
				.Disable				=	.Default;
				.InactiveDisable		=	.Disable;
			}
		}

		map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_StandardHeaderTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Table					=	GFC_Control_StandardHeaderTable_Style;
		map GFC_Control											=	GFC_Control_StandardHeaderTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Header					=	GFC_Control_StandardHeaderTable_Style;
		map GFC_Control											=	GFC_Control_StandardHeaderTable_Style;
	}

}
	
	// ** Table border style
	
	style SF_CtrlTheme_FreeRealms_Control_Table_TableBorder_Style
	{
		GFC_Control_Border_Size_Margin								=	GRectMargin(4,0,4,6);

		with GFC_CtrlTheme_Bitmap_Control_Border_Skin_Full
		{
			.Default
			{
				layer
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		= GColorCombine(RevSubtract,Disable);
					FactorCombine	= GColorCombine(Modulate,Source);
					FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 0);
					Margin			=	GRectMargin(4,21,4,6);
				}
				layer 
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(BlendSource,Disable);
					FactorCombine	=	GColorCombine(Modulate,Modulate);
					FactorColor		=	SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 1);
					Margin			=	GRectMargin(4,21,4,6);
				}
				layer 
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(Add,Disable);
					FactorCombine	=	GColorCombine(Modulate,Source);
					FactorColor		=	SF_CtrlTheme_FreeRealms_Control_Color_Surface2;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 2);
					Margin			=	GRectMargin(4,21,4,6);
				}
				layer 
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(Add,Disable);
					FactorCombine	=	GColorCombine(Modulate,Source);
					FactorColor		=	SF_CtrlTheme_FreeRealms_Control_Color_Outline;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 3);
					Margin			=	GRectMargin(4,21,4,6);
				}
			}
			.Disable
			{
				layer 
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(BlendSource,Disable);
					FactorCombine	=	GColorCombine(Modulate,Modulate);
					FactorColor		=	SF_CtrlTheme_FreeRealms_Control_Color_Surface1;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 1);
					Margin			=	GRectMargin(4,21,4,6);
				}
				layer 
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(Add,Disable);
					FactorCombine	=	GColorCombine(Modulate,Source);
					FactorColor		=	SF_CtrlTheme_FreeRealms_Control_Color_SurfaceDis2;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 2);
					Margin			=	GRectMargin(4,21,4,6);
				}
				layer 
				{
					LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_EMPTY, GFC_BITMAPSKIN_SIDES_SCALE);
					DestCombine		=	GColorCombine(Add,Disable);
					FactorCombine	=	GColorCombine(Modulate,Source);
					FactorColor		=	SF_CtrlTheme_FreeRealms_Control_Color_OutlineDis;
					Image			=	GBitmap("FreeRealms/FR_TableBorder.tga", HVGrid, 1, 4, 0, 3);
					Margin			=	GRectMargin(4,21,4,6);
				}
			}
		}
		with GFC_CtrlTheme_Bitmap_Control_Border_SkinId
		{
			.TopLeftCorner					=	GPropertyId(.Flag_Left);
			.TopRightCorner					=	GPropertyId(.Flag_Right);
			.BottomLeftCorner				=	GPropertyId(.Flag_Bottom);
			.BottomRightCorner				=	GPropertyId(.Flag_Bottom);
		}
		
		map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_DefaultBorder_Style;
		map GFC_CtrlTheme_Bitmap_Control_Border					=	GFC_Control_DefaultBorder_Style;
		map GFC_Control											=	GFC_Control_DefaultBorder_Style;
	}


	// **** Normal table style

	GFC_Control_StandardTable_Style
	{

		with .StyleId
		{
			.OuterBorder				=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Table_TableBorder_Style);
			.InnerBorder				=	GPropertyId(GFC_Control_EmptyBorder_Style);
			.LTCorner					=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Table_Standard_LTCornerPanel_Style);
			.RTCorner					=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Table_Standard_RTCornerPanel_Style);
			.LBCorner					=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Table_Standard_LBCornerPanel_Style);
			.RBCorner					=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_Table_Standard_RBCornerPanel_Style);
			.HHeader					=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_HeaderTable_HStandard_Style);
			.VHeader					=	GPropertyId(SF_CtrlTheme_FreeRealms_Control_HeaderTable_VStandard_Style);
		}


	// Solid whole control inner skin
		with GFC_CtrlTheme_Bitmap_Control_Table_Skin
		{
			with .Inner
			{
				.Default
				{
					layer
					{
						LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine		= GColorCombine(RevSubtract,Disable);
						FactorCombine	= GColorCombine(Modulate,Source);
						FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadow;
						Image			= GBitmap("FreeRealms/FR_ScrollTrack.tga", HVGrid, 1, 1, 0, 0);
						Margin			= GRectMargin(0,0,0,0);
					}
				}
				.Inactive				= .Default;
				.Disable
				{
					layer
					{
						LayerFlags		= GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine		= GColorCombine(RevSubtract,Disable);
						FactorCombine	= GColorCombine(Modulate,Source);
						FactorColor		= SF_CtrlTheme_FreeRealms_Control_Color_DropShadowDis;
						Image			= GBitmap("FreeRealms/FR_ScrollTrack.tga", HVGrid, 1, 1, 0, 0);
						Margin			= GRectMargin(0,0,0,0);
					}
				}
				.InactiveDisable		= .Disable;
			}

			// ** Row **
			
			with .Row
			{
				.Default								= SF_CtrlTheme_FreeRealms_Control_Skin_Blank;
				.Rollover								= .Default;
				.Disable								= .Default;
				.DisableRollover						= .Default;
				.Inactive								= .Default;
				.InactiveRollover						= .Default;
				.InactiveDisable						= .Default;
				.InactiveDisableRollover				= .Default;
				.Select
				{
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Select;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.SelectRollover							=	.Select;					
				.DisableSelect								
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveSelect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.DisableSelectRollover					=	.DisableSelect;
				.InactiveSelect							=	.DisableSelect;
				.InactiveSelectRollover					=	.InactiveSelect;
				.InactiveDisableSelect					=	.InactiveSelect;
				.InactiveDisableSelectRollover			=	.InactiveDisableSelect;
				.Multiselect								
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Multiselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.MultiselectRollover					=	.Multiselect;
				.DisableMultiselect							
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveMultiselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.DisableMultiselectRollover				=	.DisableMultiselect;
				.InactiveMultiselect					=	.DisableMultiselect;
				.InactiveMultiselectRollover			=	.InactiveMultiselect;
				.InactiveDisableMultiselect				=	.InactiveMultiselect;
				.InactiveDisableMultiselectRollover		=	.InactiveDisableMultiselect;
				.Offselect										
				{										
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Offselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.OffselectRollover						=	.Offselect;
				.DisableOffselect						=	.Default;
				.DisableOffselectRollover				=	.DisableOffselect;
				.InactiveOffselect
				{										
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveOffselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}
				.InactiveOffselectRollover				=	.InactiveOffselect;
				.InactiveDisableOffselect				=	.Default;
				.InactiveDisableOffselectRollover		=	.InactiveDisableOffselect;
				
				.Alt_Default							=	.Default;
				.Alt_Rollover							=	.Rollover;
				.Alt_Disable							=	.Disable;
				.Alt_DisableRollover					=	.DisableRollover;
				.Alt_Inactive							=	.Inactive;
				.Alt_InactiveRollover					=	.InactiveRollover;
				.Alt_InactiveDisable					=	.InactiveDisable;
				.Alt_InactiveDisableRollover			=	.InactiveDisableRollover;
				.Alt_Select								=	.Select;
				.Alt_SelectRollover						=	.SelectRollover;
				.Alt_DisableSelect						=	.DisableSelect;
				.Alt_DisableSelectRollover				=	.DisableSelectRollover;
				.Alt_InactiveSelect						=	.InactiveSelect;
				.Alt_InactiveSelectRollover				=	.InactiveSelectRollover;
				.Alt_InactiveDisableSelect				=	.InactiveDisableSelect;
				.Alt_InactiveDisableSelectRollover		=	.InactiveDisableSelectRollover;
				.Alt_Multiselect						=	.Multiselect;
				.Alt_MultiselectRollover				=	.MultiselectRollover;
				.Alt_DisableMultiselect					=	.DisableMultiselect;
				.Alt_DisableMultiselectRollover			=	.DisableMultiselectRollover;
				.Alt_InactiveMultiselect				=	.InactiveMultiselect;
				.Alt_InactiveMultiselectRollover		=	.InactiveMultiselectRollover;
				.Alt_InactiveDisableMultiselect			=	.InactiveDisableMultiselect;
				.Alt_InactiveDisableMultiselectRollover	=	.InactiveDisableMultiselectRollover;
				.Alt_Offselect							=	.Offselect;
				.Alt_OffselectRollover					=	.OffselectRollover;
				.Alt_DisableOffselect					=	.DisableOffselect;
				.Alt_DisableOffselectRollover			=	.DisableOffselectRollover;
				.Alt_InactiveOffselect					=	.InactiveOffselect;
				.Alt_InactiveOffselectRollover			=	.InactiveOffselectRollover;
				.Alt_InactiveDisableOffselect			=	.InactiveDisableOffselect;
				.Alt_InactiveDisableOffselectRollover	=	.InactiveDisableOffselectRollover;
			} 
			
			// ** Column **
			
			with .Col
			{
				.Default								= SF_CtrlTheme_FreeRealms_Control_Skin_Blank;
				.Rollover								= .Default;
				.Disable								= .Default;
				.DisableRollover						= .Default;
				.Inactive								= .Default;
				.InactiveRollover						= .Default;
				.InactiveDisable						= .Default;
				.InactiveDisableRollover				= .Default;
				.Select
				{
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Select;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.SelectRollover							=	.Select;					
				.DisableSelect								
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveSelect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.DisableSelectRollover					=	.DisableSelect;
				.InactiveSelect							=	.DisableSelect;
				.InactiveSelectRollover					=	.InactiveSelect;
				.InactiveDisableSelect					=	.InactiveSelect;
				.InactiveDisableSelectRollover			=	.InactiveDisableSelect;
				.Multiselect								
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Multiselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.MultiselectRollover					=	.Multiselect;
				.DisableMultiselect							
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveMultiselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.DisableMultiselectRollover				=	.DisableMultiselect;
				.InactiveMultiselect					=	.DisableMultiselect;
				.InactiveMultiselectRollover			=	.InactiveMultiselect;
				.InactiveDisableMultiselect				=	.InactiveMultiselect;
				.InactiveDisableMultiselectRollover		=	.InactiveDisableMultiselect;
				.Offselect										
				{										
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Offselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.OffselectRollover						=	.Offselect;
				.DisableOffselect						=	.Default;
				.DisableOffselectRollover				=	.DisableOffselect;
				.InactiveOffselect
				{										
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveOffselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}
				.InactiveOffselectRollover				=	.InactiveOffselect;
				.InactiveDisableOffselect				=	.Default;
				.InactiveDisableOffselectRollover		=	.InactiveDisableOffselect;
				
				.Alt_Default							=	.Default;
				.Alt_Rollover							=	.Rollover;
				.Alt_Disable							=	.Disable;
				.Alt_DisableRollover					=	.DisableRollover;
				.Alt_Inactive							=	.Inactive;
				.Alt_InactiveRollover					=	.InactiveRollover;
				.Alt_InactiveDisable					=	.InactiveDisable;
				.Alt_InactiveDisableRollover			=	.InactiveDisableRollover;
				.Alt_Select								=	.Select;
				.Alt_SelectRollover						=	.SelectRollover;
				.Alt_DisableSelect						=	.DisableSelect;
				.Alt_DisableSelectRollover				=	.DisableSelectRollover;
				.Alt_InactiveSelect						=	.InactiveSelect;
				.Alt_InactiveSelectRollover				=	.InactiveSelectRollover;
				.Alt_InactiveDisableSelect				=	.InactiveDisableSelect;
				.Alt_InactiveDisableSelectRollover		=	.InactiveDisableSelectRollover;
				.Alt_Multiselect						=	.Multiselect;
				.Alt_MultiselectRollover				=	.MultiselectRollover;
				.Alt_DisableMultiselect					=	.DisableMultiselect;
				.Alt_DisableMultiselectRollover			=	.DisableMultiselectRollover;
				.Alt_InactiveMultiselect				=	.InactiveMultiselect;
				.Alt_InactiveMultiselectRollover		=	.InactiveMultiselectRollover;
				.Alt_InactiveDisableMultiselect			=	.InactiveDisableMultiselect;
				.Alt_InactiveDisableMultiselectRollover	=	.InactiveDisableMultiselectRollover;
				.Alt_Offselect							=	.Offselect;
				.Alt_OffselectRollover					=	.OffselectRollover;
				.Alt_DisableOffselect					=	.DisableOffselect;
				.Alt_DisableOffselectRollover			=	.DisableOffselectRollover;
				.Alt_InactiveOffselect					=	.InactiveOffselect;
				.Alt_InactiveOffselectRollover			=	.InactiveOffselectRollover;
				.Alt_InactiveDisableOffselect			=	.InactiveDisableOffselect;
				.Alt_InactiveDisableOffselectRollover	=	.InactiveDisableOffselectRollover;	
			}											
															
			// ** Cell **									
															
			with .Cell										
			{											
				.Default								= SF_CtrlTheme_FreeRealms_Control_Skin_Blank;
				.Rollover								= .Default;
				.Disable								= .Default;
				.DisableRollover						= .Default;
				.Inactive								= .Default;
				.InactiveRollover						= .Default;
				.InactiveDisable						= .Default;
				.InactiveDisableRollover				= .Default;
				.Select
				{
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Select;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.SelectRollover							=	.Select;					
				.DisableSelect								
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveSelect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.DisableSelectRollover					=	.DisableSelect;
				.InactiveSelect							=	.DisableSelect;
				.InactiveSelectRollover					=	.InactiveSelect;
				.InactiveDisableSelect					=	.InactiveSelect;
				.InactiveDisableSelectRollover			=	.InactiveDisableSelect;
				.Multiselect								
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Multiselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.MultiselectRollover					=	.Multiselect;
				.DisableMultiselect							
				{										
					layer {									
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveMultiselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.DisableMultiselectRollover				=	.DisableMultiselect;
				.InactiveMultiselect					=	.DisableMultiselect;
				.InactiveMultiselectRollover			=	.InactiveMultiselect;
				.InactiveDisableMultiselect				=	.InactiveMultiselect;
				.InactiveDisableMultiselectRollover		=	.InactiveDisableMultiselect;
				.Offselect										
				{										
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_Offselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}										
				.OffselectRollover						=	.Offselect;
				.DisableOffselect						=	.Default;
				.DisableOffselectRollover				=	.DisableOffselect;
				.InactiveOffselect
				{										
					layer {
						LayerFlags						=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE);
						DestCombine						=	GColorCombine(Add,Disable);
						FactorCombine					=	GColorCombine(Modulate,Source);
						FactorColor						=	GFC_Control_Table_Color_Inner_InactiveOffselect;
						Image							=	GBitmap("FreeRealms/FR_White.tga");
						Margin							=	GRectMargin(0,0,0,0);
					}									
				}
				.InactiveOffselectRollover				=	.InactiveOffselect;
				.InactiveDisableOffselect				=	.Default;
				.InactiveDisableOffselectRollover		=	.InactiveDisableOffselect;
			} 
			
			with .HInsertIndicator
			{		
				.Default
				{
					layer {
						LayerFlags		=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
						DestCombine		=	GColorCombine(BlendSource,Disable);
						FactorCombine	=	GColorCombine(Modulate,Source);
						FactorColor		=	GFC_Control_Table_Color_Text_Default;
						Image			=	GBitmap("FreeRealms/FR_Table_HInsertIndicator.tga", HVGrid, 1, 1, 0, 0);
						Margin			=	GRectMargin(0,9,0,9);
					}					
				}									
			} 
			
			
			with .VInsertIndicator
			{
				.Default
				{
					layer {
						LayerFlags		=	GFlags(GCtrlBitmapSkin, GFC_BITMAPSKIN_CENTER_SCALE, GFC_BITMAPSKIN_SIDES_SCALE);
						DestCombine		=	GColorCombine(BlendSource,Disable);
						FactorCombine	=	GColorCombine(Modulate,Source);
						FactorColor		=	GFC_Control_Table_Color_Text_Default;
						Image			=	GBitmap("FreeRealms/FR_Table_VInsertIndicator.tga", HVGrid, 1, 1, 0, 0);
						Margin			=	GRectMargin(9,0,9,0);
					}					
				}
			} 
		}
		
		map SF_CtrlTheme_FreeRealms_Control						=	GFC_Control_DefaultTable_Style;
		map GFC_CtrlTheme_Bitmap_Control_Table					=	GFC_Control_DefaultTable_Style;		
		map GFC_Control											=	GFC_Control_DefaultTable_Style;
	}

} 